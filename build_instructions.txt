# Getting Started with Cortex Agents and Slack

## Overview

Cortex Agents simplify AI-powered data interactions via a REST API, combining hybrid search and accurate SQL generation. They streamline workflows by managing context retrieval, natural language to SQL conversion, and LLM orchestration. Response quality is enhanced with in-line citations, answer abstention, and multi-message context handling. Developers benefit from a single API call integration, real-time streamed responses, and reduced latency for optimized applications.

## Github Repository & Step-by-Step Guide for HOL
-- github repository
https://github.com/sfc-gh-anathan/saks-cortex-agents-with-slack 

-- path to quickstart
-- Note that this github repo has been SIGNIFICANTLY MODIFIED. It still has additional contextual information on the lab and installation instructions and links that may be helpful. This is only for additional context
[QuickStart Guide](https://quickstarts.snowflake.com/guide/integrate_snowflake_cortex_agents_with_slack/index.html).

-- instructions for getting set up in slack
https://tools.slack.dev/bolt-python/getting-started/ 

## Saks Hands-on-Lab

NOTE: in multiple instances it is necessary to change the name of the default databases with a suffix of your initials.

1. Copy github repo to a directory
    -- in your project: rename fill-in-the-env.txt to .env
    -- update your .env file per instructions at top of page

2. Set up Snowflake with preparatory scripts
    -- update setup.sql
    -- run setup.sql
        validate database and stages
    -- Load semantic model retail_sales_data.yaml into dash_semantic_models stage
    -- Load pdfs into dash_pdfs stage
    -- Add Table through "Add Data" UI
        -- create table from retail_sales_dataset.csv - name it "retail_sales_dataset"
        -- validate data exists

3. Update semantic model
    -- Validate semantic model via Cortex Analyst in AI & ML
    -- *******  You will need to OVERWRITE the database name with yours (the one with your initials if you are not on a trial)
    -- Make sure to save the semantic model
    -- explore the data briefly

4. Setup the Cortex Search Service
    -- update DASH_DB database names if not on a trial
    -- Run cortex_search_service.sql
        -- This will take several minutes to load
    -- Validate the creation of the service within the database's schema
    -- Open the Cortex Search Services to query the data

5. Create Slack App 
    -- go to https://tools.slack.dev/bolt-python/getting-started/
    -- Then "Your Apps"
    -- Then Create New App from "Manifest"
        -- paste the manifest json into the text box 
        -- add app level token - connections: write, call it saks-slack-app-token
        -- add the saks-logo
        -- install to your slack workspace
    -- Associate the with a channel
        -- create a new slack channel
        -- Validate that the app can be associated with a channel
            -- if it doesn't show up to add to a channel, then enter /invite @[Your App's Name]        
    -- Create your tokens: 
        add a scope of connections:write for the app scope
    -- add your APP and BOT tokens from your Slack Application configuration menus into .env

6. Create key-pairs & update USER
    -- see instructions below

7. Run application
    -- build the virtual environment and install libraries
        ## To create a virtual python3 environment
        python3 -m venv .venv
        source .venv/bin/activate
        which python3
        pip install -r requirements.txt


## To generate keys
-- generate a private key
openssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out rsa_key.p8 -nocrypt
--The commands generate a private key in PEM format.
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIE6T...
-----END ENCRYPTED PRIVATE KEY-----
-- Generate a public key
openssl rsa -in rsa_key.p8 -pubout -out rsa_key.pub
-- The command generates the public key in PEM format.
-----BEGIN PUBLIC KEY-----
MIIBIj...
-----END PUBLIC KEY-----
-- set the key on the Snowflake user

ALTER USER example_user SET RSA_PUBLIC_KEY='MIIBIjANBgkqh...';

